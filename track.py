from collections import defaultdict
import cv2
import numpy as np
import face_recognition
from ultralytics import YOLO
import time
import torch


class Person:
    def __init__(self, track_id, current_time, confidence):
        self.track_id = track_id
        self.confidence = confidence
        self.start_time = current_time
        self.track_history = []
        self.is_safe = None  # None - –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω, True - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π, False - –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω
        self.face_checked = False
        self.warning_shown = False
        self.last_seen_time = current_time
        
    def update_position(self, x, y, current_time, confidence):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"""
        self.track_history.append((float(x), float(y)))
        if len(self.track_history) > 30:  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ 30 –∫–∞–¥—Ä–æ–≤
            self.track_history.pop(0)
        self.last_seen_time = current_time
        self.confidence = confidence
        
    def get_tracking_duration(self, current_time):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        return current_time - self.start_time
    
    def check_face_safety(self, frame, x, y, w, h, target_encoding, height, width):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ª–∏—Ü–∞"""
        if self.face_checked or target_encoding is None:
            return
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ª–∏—Ü–∞ –∏–∑ –±–æ–∫—Å–∞
        x1 = int(x - w/2)
        y1 = int(y - h/2)
        x2 = int(x + w/2)
        y2 = int(y + h/2)
        
        # –û–±—Ä–µ–∑–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ª–∏—Ü–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º –æ—Ç—Å—Ç—É–ø–æ–º
        face_region = frame[max(0, y1):min(height, y2), max(0, x1):min(width, x2)]
        
        if face_region.size > 0:
            # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            small_face = cv2.resize(face_region, (0, 0), fx=0.5, fy=0.5)
            rgb_face = cv2.cvtColor(small_face, cv2.COLOR_BGR2RGB)
            
            # –ü–æ–∏—Å–∫ –ª–∏—Ü –≤ –æ–±–ª–∞—Å—Ç–∏
            face_locations = face_recognition.face_locations(rgb_face)
            face_encodings = face_recognition.face_encodings(rgb_face, face_locations)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ü–µ–ª–µ–≤—ã–º –ª–∏—Ü–æ–º
            self.is_safe = False
            for face_encoding in face_encodings:
                matches = face_recognition.compare_faces([target_encoding], face_encoding, tolerance=0.6)
                if matches[0]:
                    self.is_safe = True
                    print(f"‚úÖ –ß–µ–ª–æ–≤–µ–∫ ID {self.track_id} –æ–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –ë–ï–ó–û–ü–ê–°–ù–´–ô")
                    break
            
            self.face_checked = True
            if not self.is_safe:
                print(f"‚ö†Ô∏è  –ß–µ–ª–æ–≤–µ–∫ ID {self.track_id} –ù–ï –û–ü–û–ó–ù–ê–ù")
    
    def check_long_tracking_warning(self, current_time):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏"""
        if self.get_tracking_duration(current_time) > 10.0 and not self.warning_shown:
            safety_status = "–ë–ï–ó–û–ü–ê–°–ù–´–ô" if self.is_safe else "–ù–ï –û–ü–û–ó–ù–ê–ù"
            print(f"‚ö†Ô∏è  –ß–µ–ª–æ–≤–µ–∫ ID {self.track_id} ({safety_status}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.confidence:.2f}) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–¥—Ä–µ —É–∂–µ {self.get_tracking_duration(current_time):.1f} —Å–µ–∫—É–Ω–¥!")
            self.warning_shown = True
    
    def get_track_color(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç —Ç—Ä–µ–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        if self.is_safe is True:
            return (0, 255, 0)  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö
        elif self.is_safe is False:
            return (0, 0, 255)  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö
        else:
            return (0, 255, 255)  # –ñ–µ–ª—Ç—ã–π –¥–ª—è –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö
    
    def get_status_text(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞"""
        if self.is_safe is True:
            return "SAFE"
        elif self.is_safe is False:
            return "UNKNOWN"
        else:
            return "CHECKING"
    
    def draw_track(self, frame):
        """–†–∏—Å—É–µ—Ç —Ç—Ä–µ–∫ –Ω–∞ –∫–∞–¥—Ä–µ"""
        if len(self.track_history) > 1:
            points = np.hstack(self.track_history).astype(np.int32).reshape((-1, 1, 2))
            cv2.polylines(frame, [points], isClosed=False, color=self.get_track_color(), thickness=10)
    
    def draw_status_text(self, frame, x, y, w, h):
        """–†–∏—Å—É–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –∫–∞–¥—Ä–µ"""
        status_text = self.get_status_text()
        text_color = self.get_track_color()
        cv2.putText(frame, f"ID:{self.track_id} {status_text}", 
                   (int(x-w/2), int(y-h/2-10)), cv2.FONT_HERSHEY_SIMPLEX, 0.7, text_color, 2)


class PersonTracker:
    def __init__(self, target_encoding):
        self.people = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ Person
        self.target_encoding = target_encoding
        
    def update_person(self, track_id, x, y, w, h, confidence, current_time, frame, height, width):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–ª–æ–≤–µ–∫–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ"""
        if track_id not in self.people:
            self.people[track_id] = Person(track_id, current_time, confidence)
        
        person = self.people[track_id]
        person.update_position(x, y, current_time, confidence)
        person.check_face_safety(frame, x, y, w, h, self.target_encoding, height, width)
        person.check_long_tracking_warning(current_time)
        
        return person
    
    def cleanup_old_tracks(self, current_time, threshold=5.0):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ç—Ä–µ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –±–æ–ª–µ–µ threshold —Å–µ–∫—É–Ω–¥"""
        tracks_to_remove = []
        for track_id, person in self.people.items():
            if current_time - person.last_seen_time > threshold:
                tracks_to_remove.append(track_id)
        
        for track_id in tracks_to_remove:
            del self.people[track_id]
    
    def get_person(self, track_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Person –ø–æ ID"""
        return self.people.get(track_id)
    
    def get_all_people(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –ª—é–¥–µ–π"""
        return self.people.values()
    
    def get_safe_people_count(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ª—é–¥–µ–π"""
        return sum(1 for person in self.people.values() if person.is_safe is True)
    
    def get_unknown_people_count(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –ª—é–¥–µ–π"""
        return sum(1 for person in self.people.values() if person.is_safe is False)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CUDA
cuda_available = torch.cuda.is_available()
device = 'cuda' if cuda_available else 'cpu'
print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
if cuda_available:
    print(f"üöÄ GPU: {torch.cuda.get_device_name(0)}")
    print(f"üíæ CUDA –ø–∞–º—è—Ç—å: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CUDA –¥–ª—è PyTorch
    torch.cuda.set_device(0)
    print(f"üîß –ê–∫—Ç–∏–≤–Ω–æ–µ CUDA —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {torch.cuda.current_device()}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ YOLOv11 —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CUDA
model = YOLO("yolo11n.pt")
if cuda_available:
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ GPU
    model.model = model.model.to(device)
    print("‚úÖ –ú–æ–¥–µ–ª—å YOLO –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ GPU")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ GPU
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPU...")
    test_tensor = torch.randn(1, 3, 640, 640).to(device)
    print(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–Ω–∑–æ—Ä —Å–æ–∑–¥–∞–Ω –Ω–∞: {test_tensor.device}")
    del test_tensor
    torch.cuda.empty_cache()
else:
    print("‚ö†Ô∏è  –ú–æ–¥–µ–ª—å YOLO –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ CPU")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –ª–∏—Ü–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
try:
    target_image = face_recognition.load_image_file("target.jpg")
    target_encoding = face_recognition.face_encodings(target_image)[0]
    print("‚úÖ –¶–µ–ª–µ–≤–æ–µ –ª–∏—Ü–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –ª–∏—Ü–∞: {e}")
    target_encoding = None

# –û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞
video_path = "input.mp4"
cap = cv2.VideoCapture(video_path)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∏–¥–µ–æ
if not cap.isOpened():
    print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è {video_path}")
    exit()


# –ü–æ–ª—É—á–µ–Ω–∏–µ FPS –≤–∏–¥–µ–æ
fps = cap.get(cv2.CAP_PROP_FPS)
width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VideoWriter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter('out.mp4', fourcc, fps, (width, height))

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞ –ª—é–¥–µ–π
tracker = PersonTracker(target_encoding)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ GPU –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
if cuda_available:
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:")
    print(f"   - –ú–æ–¥–µ–ª—å –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {next(model.model.parameters()).device}")
    print(f"   - –î–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ CUDA: {torch.cuda.is_available()}")
    print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ GPU: {torch.cuda.device_count()}")
    print(f"   - –ê–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {torch.cuda.current_device()}")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    torch.cuda.empty_cache()
    print("üßπ –ö—ç—à GPU –æ—á–∏—â–µ–Ω –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏")

# –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
frame_count = 0
start_time = time.time()

# –¶–∏–∫–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞ –≤–∏–¥–µ–æ
while cap.isOpened():
    # –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –∫–∞–¥—Ä–∞ –∏–∑ –≤–∏–¥–µ–æ
    success, frame = cap.read()

    if not success:
        print("–ö–æ–Ω–µ—Ü –≤–∏–¥–µ–æ")
        break

    frame_count += 1
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GPU –∫–∞–∂–¥—ã–µ 30 –∫–∞–¥—Ä–æ–≤
    if cuda_available and frame_count % 30 == 0:
        gpu_memory_used = torch.cuda.memory_allocated(0) / 1024**2  # –≤ MB
        gpu_memory_cached = torch.cuda.memory_reserved(0) / 1024**2  # –≤ MB
        elapsed_time = time.time() - start_time
        fps_current = frame_count / elapsed_time
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPU
        gpu_util = torch.cuda.utilization(0) if hasattr(torch.cuda, 'utilization') else 'N/A'
        print(f"üìä –ö–∞–¥—Ä {frame_count} | FPS: {fps_current:.1f} | GPU –ø–∞–º—è—Ç—å: {gpu_memory_used:.1f}MB (–∫—ç—à: {gpu_memory_cached:.1f}MB) | –£—Ç–∏–ª–∏–∑–∞—Ü–∏—è: {gpu_util}%")

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ YOLO –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞–¥—Ä–µ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GPU
    if cuda_available:
        # –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ device –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è GPU
        results = model.track(frame, persist=True, device=0, half=True)  # half=True –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    else:
        results = model.track(frame, persist=True, device='cpu')
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    current_time = cap.get(cv2.CAP_PROP_POS_MSEC) / 1000.0  # –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
    if results[0].boxes is not None and results[0].boxes.id is not None:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±—ä–µ–∫—Ç–∞—Ö (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
        if cuda_available:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å GPU –Ω–∞ CPU
            boxes = results[0].boxes.xywh.detach().cpu()
            track_ids = results[0].boxes.id.int().detach().cpu().tolist()
            confidences = results[0].boxes.conf.detach().cpu().tolist()
            classes = results[0].boxes.cls.int().detach().cpu().tolist()
        else:
            # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è CPU
            boxes = results[0].boxes.xywh.cpu()
            track_ids = results[0].boxes.id.int().cpu().tolist()
            confidences = results[0].boxes.conf.cpu().tolist()
            classes = results[0].boxes.cls.int().cpu().tolist()
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª—é–¥–µ–π (–∫–ª–∞—Å—Å 0) —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é > 0.4
        filtered_data = []
        for box, track_id, conf, cls in zip(boxes, track_ids, confidences, classes):
            if cls == 0 and conf > 0.4:  # –∫–ª–∞—Å—Å 0 - —ç—Ç–æ "person" –≤ COCO dataset
                filtered_data.append((box, track_id, conf))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        if filtered_data:
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –∫–∞–¥—Ä–µ
            annotated_frame = results[0].plot()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
            for box, track_id, conf in filtered_data:
                x, y, w, h = box  # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –∏ —Ä–∞–∑–º–µ—Ä—ã –±–æ–∫—Å–∞
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Person
                person = tracker.update_person(track_id, x, y, w, h, conf, current_time, frame, height, width)
                
                # –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞
                person.draw_track(annotated_frame)
                person.draw_status_text(annotated_frame, x, y, w, h)
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–µ–∫–æ–≤
            tracker.cleanup_old_tracks(current_time)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –∫–∞–¥—Ä
            safe_count = tracker.get_safe_people_count()
            unknown_count = tracker.get_unknown_people_count()
            total_count = len(tracker.people)
            
            cv2.putText(annotated_frame, f"Total: {total_count} | Safe: {safe_count} | Unknown: {unknown_count}", 
                       (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 255), 2)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–¥—Ä–∞
            cv2.imshow("YOLOv11 Tracking", annotated_frame)
            out.write(annotated_frame)  # –∑–∞–ø–∏—Å—å –∫–∞–¥—Ä–∞ –≤ –≤—ã—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ
        else:
            # –ï—Å–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–¥—Ä
            cv2.imshow("YOLOv11 Tracking", frame)
            out.write(frame)  # –∑–∞–ø–∏—Å—å –∫–∞–¥—Ä–∞ –≤ –≤—ã—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ
    else:
        # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–¥—Ä
        cv2.imshow("YOLOv11 Tracking", frame)
        out.write(frame)  # –∑–∞–ø–∏—Å—å –∫–∞–¥—Ä–∞ –≤ –≤—ã—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ

    # –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à–∏ 'Esc'
    if cv2.waitKey(1) == 27:
        break

# –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ–∑–∞—Ö–≤–∞—Ç–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ–∫–æ–Ω OpenCV
cap.release()
out.release()  # –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞
cv2.destroyAllWindows()

# –û—á–∏—Å—Ç–∫–∞ GPU –ø–∞–º—è—Ç–∏
if cuda_available:
    torch.cuda.empty_cache()
    print("üßπ GPU –ø–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")

# –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
total_time = time.time() - start_time
avg_fps = frame_count / total_time
print(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–¥—Ä–æ–≤: {frame_count}")
print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f} —Å–µ–∫")
print(f"üìä –°—Ä–µ–¥–Ω–∏–π FPS: {avg_fps:.1f}")
print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
